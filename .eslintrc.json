{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "overrides": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "plugins": ["react", "@typescript-eslint", "import"],
  "rules": {
    "valid-typeof": "error",
    "semi": "warn",
    "no-console": "error",
    "no-var": "error",
    "prefer-const": "error",
    "eqeqeq": "error",
    "keyword-spacing": "warn",
    "space-infix-ops": "warn",
    "comma-spacing": "warn",
    "brace-style": "warn",
    "curly": "error",
    "handle-callback-err": "error",
    "no-multi-spaces": "warn",
    "no-multiple-empty-lines": "warn",
    "operator-linebreak": "error",
    "block-spacing": "warn",
    "comma-dangle": "warn",
    "comma-style": "warn",
    "dot-location": ["error", "property"],
    "key-spacing": "warn",
    "no-const-assign": "error",
    "no-constant-condition": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "error",
    "no-empty-pattern": "warn",
    "no-fallthrough": "warn",
    "no-lone-blocks": "warn",
    "no-redeclare": "error",
    "no-unmodified-loop-condition": "warn",
    "no-unneeded-ternary": "error",
    "no-unreachable": "error",
    "no-useless-computed-key": "error",
    "no-useless-rename": "warn",
    "no-whitespace-before-property": "error",
    "semi-spacing": "warn",
    "space-before-blocks": "warn",
    "space-unary-ops": "warn",
    "spaced-comment": "warn",
    "use-isnan": "error",
    "yoda": "error",
    //
    "space-before-function-paren": [
      0,
      { "anonymous": "always", "named": "always" }
    ],
    "camelcase": 0,
    "no-return-assign": 0,
    "@typescript-eslint/no-unused-vars": "error",
    // to enforce using type for object type definitions, can be type or interface
    "@typescript-eslint/consistent-type-definitions": [
      "error",
      "type"
    ],

    // suppress errors for missing 'import React' in files
    "react/react-in-jsx-scope": "off",
    // allow jsx syntax in js files (for next.js project)
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".js", ".jsx", ".tsx", ".ts"]
      }
    ]
  }
}
